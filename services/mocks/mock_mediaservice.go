// Code generated by MockGen. DO NOT EDIT.
// Source: mediaservice.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	dto "spotify/dto"
	common "spotify/helper/common"

	uploader "github.com/cloudinary/cloudinary-go/v2/api/uploader"
	gomock "github.com/golang/mock/gomock"
)

// MockMediaService is a mock of MediaService interface.
type MockMediaService struct {
	ctrl     *gomock.Controller
	recorder *MockMediaServiceMockRecorder
}

// MockMediaServiceMockRecorder is the mock recorder for MockMediaService.
type MockMediaServiceMockRecorder struct {
	mock *MockMediaService
}

// NewMockMediaService creates a new mock instance.
func NewMockMediaService(ctrl *gomock.Controller) *MockMediaService {
	mock := &MockMediaService{ctrl: ctrl}
	mock.recorder = &MockMediaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaService) EXPECT() *MockMediaServiceMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockMediaService) Upload(in dto.UploadIn) (*uploader.UploadResult, common.SubReturnCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", in)
	ret0, _ := ret[0].(*uploader.UploadResult)
	ret1, _ := ret[1].(common.SubReturnCode)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockMediaServiceMockRecorder) Upload(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockMediaService)(nil).Upload), in)
}
