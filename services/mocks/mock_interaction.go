// Code generated by MockGen. DO NOT EDIT.
// Source: interaction.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	dto "spotify/dto"
	common "spotify/helper/common"

	gomock "github.com/golang/mock/gomock"
)

// MockInteractionService is a mock of InteractionService interface.
type MockInteractionService struct {
	ctrl     *gomock.Controller
	recorder *MockInteractionServiceMockRecorder
}

// MockInteractionServiceMockRecorder is the mock recorder for MockInteractionService.
type MockInteractionServiceMockRecorder struct {
	mock *MockInteractionService
}

// NewMockInteractionService creates a new mock instance.
func NewMockInteractionService(ctrl *gomock.Controller) *MockInteractionService {
	mock := &MockInteractionService{ctrl: ctrl}
	mock.recorder = &MockInteractionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractionService) EXPECT() *MockInteractionServiceMockRecorder {
	return m.recorder
}

// AddInteraction mocks base method.
func (m *MockInteractionService) AddInteraction(ctx context.Context, userId, songId uint) (dto.Interaction, common.SubReturnCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInteraction", ctx, userId, songId)
	ret0, _ := ret[0].(dto.Interaction)
	ret1, _ := ret[1].(common.SubReturnCode)
	return ret0, ret1
}

// AddInteraction indicates an expected call of AddInteraction.
func (mr *MockInteractionServiceMockRecorder) AddInteraction(ctx, userId, songId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInteraction", reflect.TypeOf((*MockInteractionService)(nil).AddInteraction), ctx, userId, songId)
}

// RemoveInteraction mocks base method.
func (m *MockInteractionService) RemoveInteraction(ctx context.Context, userId, songId uint) (dto.Interaction, common.SubReturnCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveInteraction", ctx, userId, songId)
	ret0, _ := ret[0].(dto.Interaction)
	ret1, _ := ret[1].(common.SubReturnCode)
	return ret0, ret1
}

// RemoveInteraction indicates an expected call of RemoveInteraction.
func (mr *MockInteractionServiceMockRecorder) RemoveInteraction(ctx, userId, songId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveInteraction", reflect.TypeOf((*MockInteractionService)(nil).RemoveInteraction), ctx, userId, songId)
}
