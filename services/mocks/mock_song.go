// Code generated by MockGen. DO NOT EDIT.
// Source: song.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	dto "spotify/dto"
	common "spotify/helper/common"

	gomock "github.com/golang/mock/gomock"
)

// MockSongService is a mock of SongService interface.
type MockSongService struct {
	ctrl     *gomock.Controller
	recorder *MockSongServiceMockRecorder
}

// MockSongServiceMockRecorder is the mock recorder for MockSongService.
type MockSongServiceMockRecorder struct {
	mock *MockSongService
}

// NewMockSongService creates a new mock instance.
func NewMockSongService(ctrl *gomock.Controller) *MockSongService {
	mock := &MockSongService{ctrl: ctrl}
	mock.recorder = &MockSongServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSongService) EXPECT() *MockSongServiceMockRecorder {
	return m.recorder
}

// AddSong mocks base method.
func (m *MockSongService) AddSong(ctx context.Context, songIn dto.Song) common.SubReturnCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSong", ctx, songIn)
	ret0, _ := ret[0].(common.SubReturnCode)
	return ret0
}

// AddSong indicates an expected call of AddSong.
func (mr *MockSongServiceMockRecorder) AddSong(ctx, songIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSong", reflect.TypeOf((*MockSongService)(nil).AddSong), ctx, songIn)
}

// AddSongToPlayList mocks base method.
func (m *MockSongService) AddSongToPlayList(ctx context.Context, songId, playlistId uint) common.SubReturnCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSongToPlayList", ctx, songId, playlistId)
	ret0, _ := ret[0].(common.SubReturnCode)
	return ret0
}

// AddSongToPlayList indicates an expected call of AddSongToPlayList.
func (mr *MockSongServiceMockRecorder) AddSongToPlayList(ctx, songId, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSongToPlayList", reflect.TypeOf((*MockSongService)(nil).AddSongToPlayList), ctx, songId, playlistId)
}

// GetAllSong mocks base method.
func (m *MockSongService) GetAllSong(ctx context.Context) ([]dto.Song, common.SubReturnCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSong", ctx)
	ret0, _ := ret[0].([]dto.Song)
	ret1, _ := ret[1].(common.SubReturnCode)
	return ret0, ret1
}

// GetAllSong indicates an expected call of GetAllSong.
func (mr *MockSongServiceMockRecorder) GetAllSong(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSong", reflect.TypeOf((*MockSongService)(nil).GetAllSong), ctx)
}

// GetSongByAlbumID mocks base method.
func (m *MockSongService) GetSongByAlbumID(ctx context.Context, albumId uint) ([]dto.Song, common.SubReturnCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongByAlbumID", ctx, albumId)
	ret0, _ := ret[0].([]dto.Song)
	ret1, _ := ret[1].(common.SubReturnCode)
	return ret0, ret1
}

// GetSongByAlbumID indicates an expected call of GetSongByAlbumID.
func (mr *MockSongServiceMockRecorder) GetSongByAlbumID(ctx, albumId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongByAlbumID", reflect.TypeOf((*MockSongService)(nil).GetSongByAlbumID), ctx, albumId)
}

// GetSongByArtistID mocks base method.
func (m *MockSongService) GetSongByArtistID(ctx context.Context, artistId uint) ([]dto.Song, common.SubReturnCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongByArtistID", ctx, artistId)
	ret0, _ := ret[0].([]dto.Song)
	ret1, _ := ret[1].(common.SubReturnCode)
	return ret0, ret1
}

// GetSongByArtistID indicates an expected call of GetSongByArtistID.
func (mr *MockSongServiceMockRecorder) GetSongByArtistID(ctx, artistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongByArtistID", reflect.TypeOf((*MockSongService)(nil).GetSongByArtistID), ctx, artistId)
}

// GetSongByID mocks base method.
func (m *MockSongService) GetSongByID(ctx context.Context, id uint) (dto.Song, common.SubReturnCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongByID", ctx, id)
	ret0, _ := ret[0].(dto.Song)
	ret1, _ := ret[1].(common.SubReturnCode)
	return ret0, ret1
}

// GetSongByID indicates an expected call of GetSongByID.
func (mr *MockSongServiceMockRecorder) GetSongByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongByID", reflect.TypeOf((*MockSongService)(nil).GetSongByID), ctx, id)
}

// GetSongByName mocks base method.
func (m *MockSongService) GetSongByName(ctx context.Context, name string) ([]dto.Song, common.SubReturnCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongByName", ctx, name)
	ret0, _ := ret[0].([]dto.Song)
	ret1, _ := ret[1].(common.SubReturnCode)
	return ret0, ret1
}

// GetSongByName indicates an expected call of GetSongByName.
func (mr *MockSongServiceMockRecorder) GetSongByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongByName", reflect.TypeOf((*MockSongService)(nil).GetSongByName), ctx, name)
}

// GetSongByPlayListID mocks base method.
func (m *MockSongService) GetSongByPlayListID(ctx context.Context, playListId uint) ([]dto.Song, common.SubReturnCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongByPlayListID", ctx, playListId)
	ret0, _ := ret[0].([]dto.Song)
	ret1, _ := ret[1].(common.SubReturnCode)
	return ret0, ret1
}

// GetSongByPlayListID indicates an expected call of GetSongByPlayListID.
func (mr *MockSongServiceMockRecorder) GetSongByPlayListID(ctx, playListId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongByPlayListID", reflect.TypeOf((*MockSongService)(nil).GetSongByPlayListID), ctx, playListId)
}

// GetSongLikedByUserID mocks base method.
func (m *MockSongService) GetSongLikedByUserID(ctx context.Context, userId uint) ([]dto.Song, common.SubReturnCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongLikedByUserID", ctx, userId)
	ret0, _ := ret[0].([]dto.Song)
	ret1, _ := ret[1].(common.SubReturnCode)
	return ret0, ret1
}

// GetSongLikedByUserID indicates an expected call of GetSongLikedByUserID.
func (mr *MockSongServiceMockRecorder) GetSongLikedByUserID(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongLikedByUserID", reflect.TypeOf((*MockSongService)(nil).GetSongLikedByUserID), ctx, userId)
}

// RemoveSongToPlayList mocks base method.
func (m *MockSongService) RemoveSongToPlayList(ctx context.Context, songId, playlistId uint) common.SubReturnCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSongToPlayList", ctx, songId, playlistId)
	ret0, _ := ret[0].(common.SubReturnCode)
	return ret0
}

// RemoveSongToPlayList indicates an expected call of RemoveSongToPlayList.
func (mr *MockSongServiceMockRecorder) RemoveSongToPlayList(ctx, songId, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSongToPlayList", reflect.TypeOf((*MockSongService)(nil).RemoveSongToPlayList), ctx, songId, playlistId)
}
