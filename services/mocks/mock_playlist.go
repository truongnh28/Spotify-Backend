// Code generated by MockGen. DO NOT EDIT.
// Source: playlist.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	dto "spotify/dto"
	common "spotify/helper/common"

	gomock "github.com/golang/mock/gomock"
)

// MockPlayListService is a mock of PlayListService interface.
type MockPlayListService struct {
	ctrl     *gomock.Controller
	recorder *MockPlayListServiceMockRecorder
}

// MockPlayListServiceMockRecorder is the mock recorder for MockPlayListService.
type MockPlayListServiceMockRecorder struct {
	mock *MockPlayListService
}

// NewMockPlayListService creates a new mock instance.
func NewMockPlayListService(ctrl *gomock.Controller) *MockPlayListService {
	mock := &MockPlayListService{ctrl: ctrl}
	mock.recorder = &MockPlayListServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayListService) EXPECT() *MockPlayListServiceMockRecorder {
	return m.recorder
}

// AddPlayList mocks base method.
func (m *MockPlayListService) AddPlayList(ctx context.Context, playListIn dto.PlayList) common.SubReturnCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlayList", ctx, playListIn)
	ret0, _ := ret[0].(common.SubReturnCode)
	return ret0
}

// AddPlayList indicates an expected call of AddPlayList.
func (mr *MockPlayListServiceMockRecorder) AddPlayList(ctx, playListIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlayList", reflect.TypeOf((*MockPlayListService)(nil).AddPlayList), ctx, playListIn)
}

// GetAllPlayList mocks base method.
func (m *MockPlayListService) GetAllPlayList(ctx context.Context) ([]dto.PlayList, common.SubReturnCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPlayList", ctx)
	ret0, _ := ret[0].([]dto.PlayList)
	ret1, _ := ret[1].(common.SubReturnCode)
	return ret0, ret1
}

// GetAllPlayList indicates an expected call of GetAllPlayList.
func (mr *MockPlayListServiceMockRecorder) GetAllPlayList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPlayList", reflect.TypeOf((*MockPlayListService)(nil).GetAllPlayList), ctx)
}

// GetPlayListByID mocks base method.
func (m *MockPlayListService) GetPlayListByID(ctx context.Context, id uint) (dto.PlayList, common.SubReturnCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayListByID", ctx, id)
	ret0, _ := ret[0].(dto.PlayList)
	ret1, _ := ret[1].(common.SubReturnCode)
	return ret0, ret1
}

// GetPlayListByID indicates an expected call of GetPlayListByID.
func (mr *MockPlayListServiceMockRecorder) GetPlayListByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayListByID", reflect.TypeOf((*MockPlayListService)(nil).GetPlayListByID), ctx, id)
}

// GetPlayListByName mocks base method.
func (m *MockPlayListService) GetPlayListByName(ctx context.Context, name string) ([]dto.PlayList, common.SubReturnCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayListByName", ctx, name)
	ret0, _ := ret[0].([]dto.PlayList)
	ret1, _ := ret[1].(common.SubReturnCode)
	return ret0, ret1
}

// GetPlayListByName indicates an expected call of GetPlayListByName.
func (mr *MockPlayListServiceMockRecorder) GetPlayListByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayListByName", reflect.TypeOf((*MockPlayListService)(nil).GetPlayListByName), ctx, name)
}

// GetPlayListByUserID mocks base method.
func (m *MockPlayListService) GetPlayListByUserID(ctx context.Context, userId uint) ([]dto.PlayList, common.SubReturnCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayListByUserID", ctx, userId)
	ret0, _ := ret[0].([]dto.PlayList)
	ret1, _ := ret[1].(common.SubReturnCode)
	return ret0, ret1
}

// GetPlayListByUserID indicates an expected call of GetPlayListByUserID.
func (mr *MockPlayListServiceMockRecorder) GetPlayListByUserID(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayListByUserID", reflect.TypeOf((*MockPlayListService)(nil).GetPlayListByUserID), ctx, userId)
}

// UpdatePlayList mocks base method.
func (m *MockPlayListService) UpdatePlayList(ctx context.Context, playListIn dto.PlayList) common.SubReturnCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlayList", ctx, playListIn)
	ret0, _ := ret[0].(common.SubReturnCode)
	return ret0
}

// UpdatePlayList indicates an expected call of UpdatePlayList.
func (mr *MockPlayListServiceMockRecorder) UpdatePlayList(ctx, playListIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayList", reflect.TypeOf((*MockPlayListService)(nil).UpdatePlayList), ctx, playListIn)
}
