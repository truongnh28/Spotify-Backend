// Code generated by MockGen. DO NOT EDIT.
// Source: authen.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	dto "spotify/dto"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthenService is a mock of AuthenService interface.
type MockAuthenService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenServiceMockRecorder
}

// MockAuthenServiceMockRecorder is the mock recorder for MockAuthenService.
type MockAuthenServiceMockRecorder struct {
	mock *MockAuthenService
}

// NewMockAuthenService creates a new mock instance.
func NewMockAuthenService(ctrl *gomock.Controller) *MockAuthenService {
	mock := &MockAuthenService{ctrl: ctrl}
	mock.recorder = &MockAuthenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenService) EXPECT() *MockAuthenServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthenService) Login(ctx context.Context, req dto.LoginRequest) (*dto.LoginResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(*dto.LoginResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthenServiceMockRecorder) Login(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthenService)(nil).Login), ctx, req)
}
