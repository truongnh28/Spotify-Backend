// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockServerCache is a mock of ServerCache interface.
type MockServerCache struct {
	ctrl     *gomock.Controller
	recorder *MockServerCacheMockRecorder
}

// MockServerCacheMockRecorder is the mock recorder for MockServerCache.
type MockServerCacheMockRecorder struct {
	mock *MockServerCache
}

// NewMockServerCache creates a new mock instance.
func NewMockServerCache(ctrl *gomock.Controller) *MockServerCache {
	mock := &MockServerCache{ctrl: ctrl}
	mock.recorder = &MockServerCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerCache) EXPECT() *MockServerCacheMockRecorder {
	return m.recorder
}

// GetCode mocks base method.
func (m *MockServerCache) GetCode(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode.
func (mr *MockServerCacheMockRecorder) GetCode(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockServerCache)(nil).GetCode), key)
}

// SetCode mocks base method.
func (m *MockServerCache) SetCode(data interface{}, key string, exp time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCode", data, key, exp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCode indicates an expected call of SetCode.
func (mr *MockServerCacheMockRecorder) SetCode(data, key, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockServerCache)(nil).SetCode), data, key, exp)
}
