// Code generated by MockGen. DO NOT EDIT.
// Source: jwt.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	auth "spotify/utils/auth"

	jwt_go "github.com/dgrijalva/jwt-go"
	gomock "github.com/golang/mock/gomock"
)

// MockJWTAuth is a mock of JWTAuth interface.
type MockJWTAuth struct {
	ctrl     *gomock.Controller
	recorder *MockJWTAuthMockRecorder
}

// MockJWTAuthMockRecorder is the mock recorder for MockJWTAuth.
type MockJWTAuthMockRecorder struct {
	mock *MockJWTAuth
}

// NewMockJWTAuth creates a new mock instance.
func NewMockJWTAuth(ctrl *gomock.Controller) *MockJWTAuth {
	mock := &MockJWTAuth{ctrl: ctrl}
	mock.recorder = &MockJWTAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTAuth) EXPECT() *MockJWTAuthMockRecorder {
	return m.recorder
}

// CheckValid mocks base method.
func (m *MockJWTAuth) CheckValid(tokenStr string, checkSigningMethodFunc ...auth.JWTCheckSigningMethodFunc) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{tokenStr}
	for _, a := range checkSigningMethodFunc {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckValid", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckValid indicates an expected call of CheckValid.
func (mr *MockJWTAuthMockRecorder) CheckValid(tokenStr interface{}, checkSigningMethodFunc ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{tokenStr}, checkSigningMethodFunc...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckValid", reflect.TypeOf((*MockJWTAuth)(nil).CheckValid), varargs...)
}

// GetDataFromToken mocks base method.
func (m *MockJWTAuth) GetDataFromToken(tokenStr string, checkSigningMethodFunc ...auth.JWTCheckSigningMethodFunc) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{tokenStr}
	for _, a := range checkSigningMethodFunc {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataFromToken", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataFromToken indicates an expected call of GetDataFromToken.
func (mr *MockJWTAuthMockRecorder) GetDataFromToken(tokenStr interface{}, checkSigningMethodFunc ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{tokenStr}, checkSigningMethodFunc...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataFromToken", reflect.TypeOf((*MockJWTAuth)(nil).GetDataFromToken), varargs...)
}

// InitializeToken mocks base method.
func (m *MockJWTAuth) InitializeToken(data string, signingMethod ...*jwt_go.SigningMethodHMAC) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{data}
	for _, a := range signingMethod {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitializeToken", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeToken indicates an expected call of InitializeToken.
func (mr *MockJWTAuthMockRecorder) InitializeToken(data interface{}, signingMethod ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{data}, signingMethod...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeToken", reflect.TypeOf((*MockJWTAuth)(nil).InitializeToken), varargs...)
}

// UpdateDataToken mocks base method.
func (m *MockJWTAuth) UpdateDataToken(tokenStr, newData string, checkSigningMethodFunc ...auth.JWTCheckSigningMethodFunc) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{tokenStr, newData}
	for _, a := range checkSigningMethodFunc {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDataToken", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataToken indicates an expected call of UpdateDataToken.
func (mr *MockJWTAuthMockRecorder) UpdateDataToken(tokenStr, newData interface{}, checkSigningMethodFunc ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{tokenStr, newData}, checkSigningMethodFunc...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataToken", reflect.TypeOf((*MockJWTAuth)(nil).UpdateDataToken), varargs...)
}
