// Code generated by MockGen. DO NOT EDIT.
// Source: artist.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	dto "spotify/dto"
	models "spotify/models"

	gomock "github.com/golang/mock/gomock"
)

// MockArtistRepository is a mock of ArtistRepository interface.
type MockArtistRepository struct {
	ctrl     *gomock.Controller
	recorder *MockArtistRepositoryMockRecorder
}

// MockArtistRepositoryMockRecorder is the mock recorder for MockArtistRepository.
type MockArtistRepositoryMockRecorder struct {
	mock *MockArtistRepository
}

// NewMockArtistRepository creates a new mock instance.
func NewMockArtistRepository(ctrl *gomock.Controller) *MockArtistRepository {
	mock := &MockArtistRepository{ctrl: ctrl}
	mock.recorder = &MockArtistRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtistRepository) EXPECT() *MockArtistRepositoryMockRecorder {
	return m.recorder
}

// AddArtist mocks base method.
func (m *MockArtistRepository) AddArtist(ctx context.Context, ArtistIn dto.Artist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddArtist", ctx, ArtistIn)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddArtist indicates an expected call of AddArtist.
func (mr *MockArtistRepositoryMockRecorder) AddArtist(ctx, ArtistIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddArtist", reflect.TypeOf((*MockArtistRepository)(nil).AddArtist), ctx, ArtistIn)
}

// GetAllArtist mocks base method.
func (m *MockArtistRepository) GetAllArtist(ctx context.Context) ([]models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllArtist", ctx)
	ret0, _ := ret[0].([]models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllArtist indicates an expected call of GetAllArtist.
func (mr *MockArtistRepositoryMockRecorder) GetAllArtist(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllArtist", reflect.TypeOf((*MockArtistRepository)(nil).GetAllArtist), ctx)
}

// GetArtistByID mocks base method.
func (m *MockArtistRepository) GetArtistByID(ctx context.Context, id uint) (models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistByID", ctx, id)
	ret0, _ := ret[0].(models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistByID indicates an expected call of GetArtistByID.
func (mr *MockArtistRepositoryMockRecorder) GetArtistByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistByID", reflect.TypeOf((*MockArtistRepository)(nil).GetArtistByID), ctx, id)
}

// GetArtistByName mocks base method.
func (m *MockArtistRepository) GetArtistByName(ctx context.Context, name string) ([]models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistByName", ctx, name)
	ret0, _ := ret[0].([]models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistByName indicates an expected call of GetArtistByName.
func (mr *MockArtistRepositoryMockRecorder) GetArtistByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistByName", reflect.TypeOf((*MockArtistRepository)(nil).GetArtistByName), ctx, name)
}

// UpdateArtist mocks base method.
func (m *MockArtistRepository) UpdateArtist(ctx context.Context, ArtistIn dto.Artist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArtist", ctx, ArtistIn)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArtist indicates an expected call of UpdateArtist.
func (mr *MockArtistRepositoryMockRecorder) UpdateArtist(ctx, ArtistIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArtist", reflect.TypeOf((*MockArtistRepository)(nil).UpdateArtist), ctx, ArtistIn)
}
