// Code generated by MockGen. DO NOT EDIT.
// Source: album.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	dto "spotify/dto"
	models "spotify/models"

	gomock "github.com/golang/mock/gomock"
)

// MockAlbumRepository is a mock of AlbumRepository interface.
type MockAlbumRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAlbumRepositoryMockRecorder
}

// MockAlbumRepositoryMockRecorder is the mock recorder for MockAlbumRepository.
type MockAlbumRepositoryMockRecorder struct {
	mock *MockAlbumRepository
}

// NewMockAlbumRepository creates a new mock instance.
func NewMockAlbumRepository(ctrl *gomock.Controller) *MockAlbumRepository {
	mock := &MockAlbumRepository{ctrl: ctrl}
	mock.recorder = &MockAlbumRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlbumRepository) EXPECT() *MockAlbumRepositoryMockRecorder {
	return m.recorder
}

// AddAlbum mocks base method.
func (m *MockAlbumRepository) AddAlbum(ctx context.Context, albumIn dto.Album) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAlbum", ctx, albumIn)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAlbum indicates an expected call of AddAlbum.
func (mr *MockAlbumRepositoryMockRecorder) AddAlbum(ctx, albumIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAlbum", reflect.TypeOf((*MockAlbumRepository)(nil).AddAlbum), ctx, albumIn)
}

// GetAlbumByArtistID mocks base method.
func (m *MockAlbumRepository) GetAlbumByArtistID(ctx context.Context, artistId uint) ([]models.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumByArtistID", ctx, artistId)
	ret0, _ := ret[0].([]models.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumByArtistID indicates an expected call of GetAlbumByArtistID.
func (mr *MockAlbumRepositoryMockRecorder) GetAlbumByArtistID(ctx, artistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumByArtistID", reflect.TypeOf((*MockAlbumRepository)(nil).GetAlbumByArtistID), ctx, artistId)
}

// GetAlbumByID mocks base method.
func (m *MockAlbumRepository) GetAlbumByID(ctx context.Context, id uint) (models.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumByID", ctx, id)
	ret0, _ := ret[0].(models.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumByID indicates an expected call of GetAlbumByID.
func (mr *MockAlbumRepositoryMockRecorder) GetAlbumByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumByID", reflect.TypeOf((*MockAlbumRepository)(nil).GetAlbumByID), ctx, id)
}

// GetAlbumByName mocks base method.
func (m *MockAlbumRepository) GetAlbumByName(ctx context.Context, name string) ([]models.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumByName", ctx, name)
	ret0, _ := ret[0].([]models.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumByName indicates an expected call of GetAlbumByName.
func (mr *MockAlbumRepositoryMockRecorder) GetAlbumByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumByName", reflect.TypeOf((*MockAlbumRepository)(nil).GetAlbumByName), ctx, name)
}

// GetAllAlbum mocks base method.
func (m *MockAlbumRepository) GetAllAlbum(ctx context.Context) ([]models.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAlbum", ctx)
	ret0, _ := ret[0].([]models.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAlbum indicates an expected call of GetAllAlbum.
func (mr *MockAlbumRepositoryMockRecorder) GetAllAlbum(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAlbum", reflect.TypeOf((*MockAlbumRepository)(nil).GetAllAlbum), ctx)
}

// UpdateAlbum mocks base method.
func (m *MockAlbumRepository) UpdateAlbum(ctx context.Context, albumIn dto.Album) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlbum", ctx, albumIn)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAlbum indicates an expected call of UpdateAlbum.
func (mr *MockAlbumRepositoryMockRecorder) UpdateAlbum(ctx, albumIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlbum", reflect.TypeOf((*MockAlbumRepository)(nil).UpdateAlbum), ctx, albumIn)
}
